<?php
/**
 * @file
 * Code for the DOTGO Matches feature.
 */

include_once 'dotgo_matches.features.inc';
include_once 'includes/dotgo_matches.util.inc';
include_once 'includes/dotgo_matches.form.inc';
include_once 'includes/dotgo_matches.cache.inc';

/**
 * Implements hook_menu().
 */
function dotgo_matches_menu() {
  $items = array();
  $items['admin/structure/dotgo/settings'] = array(
    'title' => 'Match settings',
    'description' => 'Configure settings for the Matches',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dotgo_matches_apps_configure_form'),
    'access arguments' => array('administer dotgo_matches'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function dotgo_matches_permission() {
  return array(
    'administer dotgo_matches' => array(
      'title' => t('Administer DOTGO Matches'),
      'description' => t('Configure settings for DOTGO Matches'),
    ),
  );
}

/**
 * Implementation of hook_dotgo_engine.
 */
function dotgo_matches_dotgo_engine() {
  $myEngines = array();
  $myEngines[] = array(
    'match' => 'matches',
    'engine_href' => 'matches',
  );
  return $myEngines;
}

/**
 * Callback for the dotgo_matches engine.
 */
function dotgo_matches($sys_argument) {
  global $user;
  $dg = _dotgo_designator();
  $return = '';
  $params = _dotgo_get_parameters();
  $new_user = TRUE;
  $session_variables = array();

  // The match tree nid should be passed.
  if(is_numeric(arg(2))){
    $node = node_load(arg(2));
  } elseif (isset($sys_argument) && is_numeric($sys_argument)) {
    $node = node_load($sys_argument);
  }

  if(is_object($node) && isset($node->nid)){
    $node->match = dotgo_matches_load_match($node);
  }

  // Check if the node is a match
  if(is_object($node) && $node->type == DOTGO_MATCH_TYPE){
    $type = $node->field_dotgo_match_type[$node->language][0]['value'];
  }

  // Grab the $user object with sys_user DOTGO system variable
  if(!isset($params['sys_user'])){
    $params['sys_user'] = 'user-'.user_password(8);
    $session_variables['sys_user'] = $params['sys_user'];
    //$user = dotgo_users_get(array('sys_user' => $params['sys_user']));
  } else {
    $new_user = FALSE;
  }

  if(!node_access('view', $node, $user)){
    return _dotgo_message('You are unauthorized to view match.');
  }

  if(!isset($params['match_state_cache'])){
    $params['match_state_cache'] = user_password($length = 10);
  }

  $options = array();
  $match_state = array();

  // We have a cached match state.
  $cid = dotgo_matches_get_cache_id(DOTGO_CACHE_MATCH_STATE, $params['sys_user'], FALSE, array($params['match_state_cache']));

  if(dotgo_matches_get_cache(DOTGO_CACHE_MATCH_STATE, $cid, $return)){
    return $return;
  } else {
    switch ($type) {
      case "form":
        $input_id = empty($node->field_dotgo_match_webform) ? NULL : $node->field_dotgo_match_webform[$node->language][0]['form_key'];
        if(isset($_REQUEST[$input_id])){
          $next_match = dotgo_matches_determin_next_match($node, $params);
          $options = array();
          $engine = 'matches/'.$next_match->nid;
          $return = _dotgo_engine_session($engine, $options);
        } else {
          $message = dotgo_matches_render_match_form_message($node);
          $href = 'matches/'.$node->nid;
          $return = _dotgo_input_session($input_id, $session_variables, $message, $href, $options);
        }
        break;
      case "engine":
        $options = array();
        $engine = $node->field_dotgo_match_engine[$node->language][0]['url'];
        $return = _dotgo_engine_session($engine, $options);
        break;
      case "default":
        $message = empty($node->field_dotgo_match_message) ? NULL : $node->field_dotgo_match_message[$node->language][0]['value'];
        $children = dotgo_matches_get_by_parent($node->nid);
        if(!empty($children)){
          foreach($children as $child){
            $child = node_load($child);
            $query = $dg . ' ' . variable_get('dotgo_matches_match', 'matches') . ' ' . $child->nid;
            $message .= _dotgo_make_anchor_query($query) . $child->title . '<br />';
          }
        }
        $return = _dotgo_message($message);
        break;
    }
  }

  dotgo_matches_set_cache(DOTGO_CACHE_MATCH_STATE, $cid, $return);

  return $return;
}

/**
 * Implementation of hook_entity_presave().
 */
function dotgo_matches_entity_presave($entity, $type) {
  if ($type == 'node' && $entity->type == 'dotgo_match') {
    $parent = NULL;
    if (isset($entity->field_dotgo_match_parent[$entity->language][0]['target_id'])) {
      $parent = $entity->field_dotgo_match_parent[$entity->language][0]['target_id'];
    }

    $match = NULL;
    if (isset($entity->field_dotgo_match[$entity->language][0]['target_id'])) {
      $match = $entity->field_dotgo_match[$entity->language][0]['target_id'];
    }

    if ($parent) {
      if (!$match) {
        $match = dotgo_matches_get_match($parent);
        $entity->field_dotgo_match[$entity->language][0]['target_id'] = $match;
      }
      if($match == $entity->nid) {
        unset($entity->field_dotgo_match_parent[$entity->language]);
      }
    } else {
      unset($entity->field_dotgo_match[$entity->language]);
      unset($entity->field_dotgo_match_parent[$entity->language]);
    }

    //make sure we always have a match.
    if (!isset($entity->field_dotgo_match[$entity->language][0]['target_id']) && isset($entity->nid)) {
      $entity->field_dotgo_match[$entity->language][0]['target_id'] = $entity->nid;
    }
  }
}

/**
 * Allowed values callback for 'Priority', 'Status' and 'Type'.
 */
function dotgo_matches_allowed_values_callback($field, $instance, $entity_type, $entity, &$cachable) {
  if (strpos($field['field_name'], 'field_dotgo_match_') === 0) {
    $field_name = substr($field['field_name'], 18);
    $allowed_values = variable_get_value("dotgo_matches_allowed_values_{$field_name}");
    return $allowed_values['options'];
  }
  return array('_none' => t('- None -'));
}