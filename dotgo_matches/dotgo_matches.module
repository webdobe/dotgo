<?php
/**
 * @file
 * Code for the DOTGO Matches feature.
 */

include_once 'dotgo_matches.features.inc';
include_once 'includes/dotgo_matches.field.inc';
include_once 'includes/dotgo_matches.util.inc';
include_once 'includes/dotgo_matches.form.inc';
include_once 'includes/dotgo_matches.cache.inc';

/**
 * Name of default DOTGO Match content type.
 */
define('DOTGO_MATCH_TYPE', 'dotgo_match');

/**
 * Implements hook_menu().
 */
function dotgo_matches_menu() {
  $items = array();
  $items['admin/structure/dotgo/settings'] = array(
    'title' => 'Match settings',
    'description' => 'Configure settings for the Matches',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dotgo_matches_apps_configure_form'),
    'access arguments' => array('administer dotgo'),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function dotgo_matches_theme(){
  $theme = array(
    'dotgo_matches_default' => array(
      'template' => 'theme/dotgo-matches-default',
    ),
  );
  return $theme;
}

/**
 * Implementation of hook_dotgo_engine().
 */
function dotgo_matches_dotgo_engine() {
  $myEngines = array();
  $myEngines[] = array(
    'match' => 'matches',
    'engine_href' => 'matches',
  );
  return $myEngines;
}

/**
 * Implements hook_dotgo_type_info().
 */
function dotgo_matches_dotgo_type_info(){
  return array(
    'default' => array(
      'label' => t('Default'),
      'description' => t('This is the default match type.'),
      'settings' => array(),
      'theme' => 'dotgo_matches_default',
    ),
  );
}

/**
 * Callback for the dotgo_matches engine.
 */
function dotgo_matches($sys_argument) {
  global $user;
  $dg = _dotgo_designator();
  $return = '';
  $format = 'xml';
  $params = _dotgo_get_parameters();
  $new_user = TRUE;
  $session_variables = array();

  // The match tree nid should be passed.
  if(is_numeric(arg(2))){
    $node = node_load(arg(2));
  } elseif (isset($sys_argument) && is_numeric($sys_argument)) {
    $node = node_load($sys_argument);
  }

  if(is_object($node) && isset($node->nid)){
    $node->match = dotgo_matches_load_match($node);
  }

  // Check if the node is a match
  if(is_object($node) && $node->type == DOTGO_MATCH_TYPE){
    $type = $node->field_dotgo_match_type[$node->language][0]['value'];
  }

  // Grab the $user object with sys_user DOTGO system variable
  if(!isset($params['sys_user'])){
    $params['sys_user'] = 'user-'.user_password(8);
    $session_variables['sys_user'] = $params['sys_user'];
    //$user = dotgo_users_get(array('sys_user' => $params['sys_user']));
  } else {
    $new_user = FALSE;
  }

  if(!node_access('view', $node, $user)){
    $message = 'You are unauthorized to view match.';
    return theme('dotgo_message', array('message' => $message, 'format' => $format));
  }

  if(!isset($params['match_state_cache'])){
    $params['match_state_cache'] = user_password($length = 10);
  }

  // We have a cached match state.
  $cid = dotgo_matches_get_cache_id(DOTGO_CACHE_MATCH_STATE, $params['sys_user'], FALSE, array($params['match_state_cache']));

  if(dotgo_matches_get_cache(DOTGO_CACHE_MATCH_STATE, $cid, $return)){
    return $return;
  } else {
    // Get type info;
    $info = dotgo_info_types($type);

    // Theme return;
    $return = theme($info['theme'], array('node' => $node, 'params' => $params, 'format' => 'xml'));
  }

  dotgo_matches_set_cache(DOTGO_CACHE_MATCH_STATE, $cid, $return);

  return $return;
}

/**
 * Implementation of hook_entity_insert().
 */
function dotgo_matches_entity_insert($entity, $type) {
  if ($type == 'node' && $entity->type == 'dotgo_match') {

  }
}

/**
 * Implementation of hook_entity_presave().
 */
function dotgo_matches_entity_presave($entity, $type) {
  if ($type == 'node' && $entity->type == 'dotgo_match') {
    $dg = _dotgo_designator();
    $tld = _dotgo_tld();
    // If we have no parent unset match and parent.
    if (empty($entity->field_dotgo_match_parent)) {
      unset($entity->field_dotgo_match[$entity->language]);
      unset($entity->field_dotgo_match_parent[$entity->language]);
    }
    // Else we do things with parent.
    else {
      // If for some reason we have no match. We find it out and set it.
      if (empty($entity->field_dotgo_match)) {
        $match =  dotgo_matches_get_match($entity->field_dotgo_match_parent[$entity->language][0]['target_id']);
        $entity->field_dotgo_match[$entity->language][0]['target_id'] = $match;
      }
      // If our match is the top level match we unset our parent.
      if($entity->field_dotgo_match[$entity->language][0]['target_id'] == $entity->nid) {
        unset($entity->field_dotgo_match_parent[$entity->language]);
      }
    }

    // Make sure we always have a match.
    if (!isset($entity->field_dotgo_match[$entity->language][0]['target_id']) && isset($entity->nid)) {
      $entity->field_dotgo_match[$entity->language][0]['target_id'] = $entity->nid;
    }

    if($entity->is_new){
      if(empty($entity->field_dotgo_match_weight[$entity->language])){
        if(isset($entity->field_dotgo_match_parent[$entity->language][0]['target_id'])){
          // We can determine the new nodes weight by counting the nodes parents children.
          $children = dotgo_matches_get_by_parent($entity->field_dotgo_match_parent[$entity->language][0]['target_id']);
          $entity->field_dotgo_match_weight[$entity->language][]['value'] = count($children);
        } else {
          $entity->field_dotgo_match_weight[$entity->language][]['value'] = 0;
        }
      }
    }
  }
}

function dotgo_matches_node_load($nodes, $types) {
  // Decide whether any of $types are relevant to our purposes.
  if (count(array_intersect(array('dotgo_match'), $types))) {
    $dg = _dotgo_designator();
    $tld = _dotgo_tld();
    foreach($nodes as $node){
      $nodes[$node->nid]->dotgo = new stdClass();
      $nodes[$node->nid]->dotgo->query = $dg.' matches '.$node->nid;
      $nodes[$node->nid]->dotgo->simulator_message = dotgo_matches_load_simulator_message($nodes[$node->nid]);
      $nodes[$node->nid]->dotgo->user_query = dotgo_matches_load_user_query($nodes[$node->nid]);
    }
  }
}

/**
 * Allowed values callback for 'Priority', 'Status' and 'Type'.
 */
function dotgo_matches_allowed_values_callback($field, $instance, $entity_type, $entity, &$cachable) {
  if (strpos($field['field_name'], 'field_dotgo_match_') === 0) {
    $field_name = substr($field['field_name'], 18);
    $allowed_values = variable_get_value("dotgo_matches_allowed_values_{$field_name}");
    return $allowed_values['options'];
  }
  return array('_none' => t('- None -'));
}

/**
 * Implements template_preprocess_dotgo_default(&$vars);
 */
function template_preprocess_dotgo_matches_default(&$vars){
  $node = isset($vars['node']) ? $vars['node'] : NULL;
  $vars['format'] = isset($vars['format']) ? $vars['format'] : 'default';
  if($node){
    $dg = _dotgo_designator();
    // Get the render object.
    $node_view = node_view($node, $view_mode = 'dotgo', $node->language);

    // Render it.
    $message = drupal_render($node_view);

    // Pass it through a filter process to make sure dotgo can digest.
    $message = _dotgo_filter_process($message);

    // We want to provide links to each child node.
    $children = dotgo_matches_get_by_parent($node->nid);
    if(!empty($children)){
      $count = 1;
      foreach($children as $child){
        $child = node_load($child);
        $query = $dg . ' ' . variable_get('dotgo_matches_match', 'matches') . ' ' . $child->nid;
        if($vars['format'] == 'default'){
          $message .= '<br />(' . $count . ')' . $child->title;
        } else {
          $message .= '<br />' . _dotgo_make_anchor_query($query) . $child->title;
        }
        $count++;
      }
    }

    $vars['message'] = $message;
    // Format the message for dotgo.
    $vars['message'] = theme('dotgo_message', $vars);
  } else {
    $vars['message'] = 'No matching node.';
    $vars['message'] = theme('dotgo_message', $vars);
  }
}