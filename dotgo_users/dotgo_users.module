<?php

include_once 'includes/dotgo_users.util.inc';

/**
 * Implementation of hook_dotgo_engine
 */
function dotgo_users_dotgo_engine() {
  $dg = _dotgo_designator();
  $myEngines = array();
  $myEngines[] = array(
    'match' => 'user',
    'engine_href' => 'users',
  );
  $myEngines[] = array(
    'match' => '*@',
    'engine_href' => "users_register",
  );
  return $myEngines;
}

/**
 * Implementation of hook_menu
 */
function dotgo_users_menu() {
  $items = array();

  $items['user/%user/dotgo_user_auth'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'DOTGO Settings',
    'page callback' => 'dotgo_users_display',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function dotgo_users_permission() {
  return array(
    'dotgo create user' => array(
      'title' => t('DOTGO Create User'),
      'description' => t('Allows an anonymous user to create site account using DOTGO.'),
    ),
    'dotgo view user' => array(
      'title' => t('DOTGO View Own User'),
      'description' => t('Allows an user to view own account using DOTGO.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function dotgo_users_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Implementation of hook_dotgo_menu
 */
function dotgo_users_dotgo_menu() {
  $dg = _dotgo_designator();
  $items = array();
  $items['create_account'] = array(
    'title' => t('Create an account'),
    'query' => $dg . ' user',
    'menu_name' => 'users',
    'access arguments' => array('dotgo create user'),
    'weight' => 0,
  );
  $items['delete_account'] = array(
    'title' => t('Delete my account'),
    'query' => $dg . ' unregister',
    'menu_name' => 'users',
    'access arguments' => array('cancel account'),
    'weight' => 0,
  );
  $items['view_account'] = array(
    'title' => t('View my account'),
    'query' => $dg . ' user',
    'menu_name' => 'users',
    'access arguments' => array('dotgo view user'),
    'weight' => 0,
  );
  $items['change_username'] = array(
    'title' => t('Change my username'),
    'query' => $dg . ' user username',
    'menu_name' => 'users',
    'access arguments' => array('change own username'),
    'weight' => 0,
  );
  $items['clear_session'] = array(
    'title' => t('Clear my session'),
    'query' => $dg . ' user clear',
    'menu_name' => 'users',
    'access arguments' => array('administer dotgo'),
    'weight' => 0,
  );
  return $items;
}

/**
 * Implementation of hook_dotgo_menu_alter
 */
function dotgo_users_dotgo_menu_alter(&$items, $current_path, $account){
  if($account->uid != 0 && isset($items['create_account'])){
    unset($items['create_account']);
  }
  if($account->uid == 1 && isset($items['delete_account'])){
    unset($items['delete_account']);
  }
}

/**
 * Implementation of hook_user
 */
function dotgo_users_user($op, &$edit, &$account, $category = NULL) {
  // when a new user is created, generate a dotgo auth token for them
  if ($account->uid) {
    switch ($op) {
      case 'insert':
      case 'load':
        // on insert and load, setup dotgo user object.
        $account->dotgo = _dotgo_users_get($account->uid);
        break;
      case 'delete':
        dotgo_users_update($op = 'delete', $account->uid, NULL);
        break;
    }
  }
}

/**
 * Callback for dotgo_users engine.
 */
function dotgo_users($sys_argument) {

  $dg = _dotgo_designator();
  $sys_user = $_REQUEST['sys_user'];
  $current_path = $_REQUEST['sys_path'];
  $email_address = $_REQUEST['email_address'];
  $account = dotgo_users_load($sys_user);
  $options = array();

  if ($account && $sys_user) {
    $message = 'Hello ' . $account->name . '!';
    $message .= dotgo_menu_build(array('users'), $current_path, $account);
    $output = theme('dotgo_message', array('message' => $message, 'format' => 'xml'));
  }
  elseif ($sys_argument == 'clear') {
    $message = 'You have cleared your session.';
    $message .= dotgo_menu_build(array('users'), $current_path, $account);
    $output = _dotgo_set_session(array('email_address' => NULL), $message);
  }
  elseif ($sys_argument == 'username') {
    $question = 'Please reply with a new Username or reply ' . _dotgo_make_anchor_query($dg) . ' to cancel.';
    $output = _dotgo_input_session('username', array(), $question, 'users', $options);
  }
  else {
    if ($email_address) {
      $valid = valid_email_address($email_address);
      if ($valid == TRUE) {
        $sys_user = explode('@', $email_address);
        $sys_user = $sys_user[0] . '@';
        $duplicate = user_load(array('mail' => $email_address));
        if (empty($duplicate)) {
          $output = dotgo_users_follow_block('reg?', 'anonymous', array('query' => array('register' => TRUE)), $dg . ' ' . $sys_user . ' register');
        }
        else {
          $question = 'The e-mail address ' . $email_address . ' already exists.  Please reply with a different E-mail address or reply ' . _dotgo_make_anchor_query($dg) . ' to cancel.';
          $output = _dotgo_input_session('email_address', array(), $question, 'users', $options);
        }
      }
      else {
        $question = 'We are sorry, we need a REAL E-mail address.  Please reply with your E-mail address or reply ' . _dotgo_make_anchor_query($dg) . ' to cancel.';
        $output = _dotgo_input_session('email_address', array(), $question, 'users', $options);
      }
    }
    else {
      $question = 'Please reply with your E-mail address or reply ' . _dotgo_make_anchor_query($dg) . ' to cancel.';
      $output = _dotgo_input_session('email_address', array(), $question, 'users', $options);
    }

  }
  return $output;
}

/**
 * Callback for dotgo_users_register engine.
 */
function dotgo_users_register($sys_argument) {

  $directive = $_REQUEST['sys_directive'];
  $sys_user = $_REQUEST['sys_user'];
  $reg = $_GET['register'];

  //GET Node ID
  $dg = _dotgo_designator();
  $current_path = $_REQUEST['sys_path'];

  //If user has follow, unfollow, this will be broadcasted
  //note register, unregister may also be used.
  if ($reg) {
    if ($directive == 'register') {
      $email_address = $_REQUEST['email_address'];
      if ($email_address) {
        $account = user_load(array('mail' => $email_address));
      }
      else {
        $username = explode('@', $sys_user);
        $username = $username[0];
        $account = user_load(array('name' => $username));
      }
      if ($account) {
        //auth drupal user account with dotgo
        $update = dotgo_users_update('update', $account->uid, $sys_user);
      }
      else {
        //else create new drupal user account
        $account = dotgo_users_add($sys_user, $email_address);
      }
      $message = 'Welcome ' . $account->name . ', you have successfully created your user account!';
      $message .= dotgo_menu_build(array('users'), $current_path, $account);
      //MUST $output with _dotgo_message or will break;
      $output = theme('dotgo_message', array('message' => $message, 'format' => 'xml'));
    }
    elseif ($directive == 'unregister') {
      $account = dotgo_users_load($sys_user);
      //make sure we are not user 1 otherwise delete account
      if ($account->uid != 1) {
        $delete = user_delete(array(), $account->uid);
        $update = dotgo_users_update('delete', $account->uid, $sys_user);
        _user_mail_notify('status_deleted', $account);
      }
      $message = 'We are sorry to see you go ' . $account->name . '! However, you have successfully removed your user account.';
      $message .= dotgo_menu_build(array('users'), $current_path);
      //MUST $output with _dotgo_message or will break;
      $output = theme('dotgo_message', array('message' => $message, 'format' => 'xml'));
    }
    else {
      $message = ' ';
      $output = theme('dotgo_message', array('message' => $message, 'format' => 'xml'));
    }
    //else anonymous user is attempting to register for first time.
  }
  else {
    $output = dotgo_users_register_block('reg', 'users_register', array('query' => array('register' => TRUE)));
  }

  return $output;
}

/**
 * Callback for dotgo users page.
 */
function dotgo_users_display() {
  global $user;
  $dg = _dotgo_designator();
  $sys_user = $user->dotgo->sys_user;
  $output = '<div id="dotgo_users_wrapper">';
  if ($sys_user) {
    $output .= 'A phone number has already been assigned to this account';
  }
  else {
    $output .= _dotgo_follow_widget($query = array(
      't' => t('Enter your phone number to follow ' . $account->name),
      'channel' => _dotgo_tld_lookup(_dotgo_tld()),
      'query' => $dg . ' ' . $user->name . '@ register'
    ), $options = array());
  }
  $output .= '</div>';
  return $output;
}