<?php

/**
 * Implementation of hook_menu
 */
function dotgo_reseller_menu() {
  $items = array();

  $items['admin/settings/dotgo_api/reseller'] = array(
    'title' => 'DOTGO Reseller Settings',
    'description' => "Manage Dotgo Reseller Settings",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dotgo_reseller_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dotgo_reseller.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/settings/dotgo_api/publisher'] = array(
    'title' => 'Launch DOTGO Publisher',
    'description' => "Manage Dotgo Reseller Settings",
    'page callback' => '_dotgo_api_call_launchApplication',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/settings/dotgo_api/methods'] = array(
    'title' => 'DOTGO Methods',
    'description' => "describeMessages",
    'page callback' => '_dotgo_api_call_describeMessages',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'weight' => 3,
  );
  $items['admin/settings/dotgo_api/methods/describemessages'] = array(
    'title' => 'describeMessages',
    'description' => "describeMessages",
    'page callback' => '_dotgo_api_call_describeMessages',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/dotgo_api/methods/describemessages/%/cancel'] = array(
    'title' => 'describeMessages Cancel',
    'page callback' => '_dotgo_api_call_describeMessages_cancel',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/dotgo_api/methods/describefollows'] = array(
    'title' => 'describeFollows',
    'description' => "describeFollows",
    'page callback' => '_dotgo_api_call_describeFollows',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/dotgo_api/methods/describeregisteredpaths'] = array(
    'title' => 'describeRegisteredPaths',
    'description' => "describeRegisteredPaths",
    'page callback' => '_dotgo_api_call_describeRegisteredPaths',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );

  return $items;

}


//////////////////////////////////////////////////
//////////////////// API CALLS ///////////////////
//////////////////////////////////////////////////
// Send an API Request to DOTGO
// Returns API Results from DOTGO
// *** MUST HAVE RESELLER KEY ***
// $query = array of parameters for the passed Method. Exluding: api_key, api_password, url, urls, format
function _dotgo_api_call($query = array()) {

  //Standard $query parameters
  $keyword = _dotgo_designator();
  $api_key = variable_get('dotgo_api_key', t(''));
  $api_password = variable_get('dotgo_api_password', t(''));
  $url = 'http://' . $_SERVER['HTTP_HOST'] . '/index.cmrl';

  $query[] = array(
    'api_key' => $api_key,
    'api_password' => $api_password,
    'url' => $url,
    'urls' => $url,
    'format' => 'xml',
  );

  $url = url('https://dotgo.com/api/1.0/', array(
    'query' => $query,
    'external' => TRUE,
  ));

  //Send a http request with drupal to the dotgo api
  $http_reply = drupal_http_request($url);

  if ($http_reply == "") {
    return "EMPTY";
  }

  //API returns results of API call with XML so we convert that to an array
  $xmlarray = _dotgo_xml2array($http_reply->data);

  if ($query['method']) {
    if ($xmlarray['result_attr']['success'] == 0) {
      drupal_set_message($xmlarray['result']['error']['code'] . ': ' . $xmlarray['result']['error']['description'], $type = 'error', $repeat = TRUE);
    }
    if (module_exists('watchdog')) {
      $message = print_r($xmlarray, TRUE);
      watchdog($query['method'], $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
    }
  }
  else {

    if (module_exists('watchdog')) {
      watchdog('DOTGO API', 'No Method Provided', $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
    }

  }

  return $xmlarray;

}

function _dotgo_api_call_describeMessages() {

  drupal_set_title(t('Method: describeMessages'));

  $query = array(
    'method' => 'describeMessages',
    'limit' => 100,
  );

  $xmlarray = _dotgo_api_call($query);

  $header = array(
    'Message ID',
    'Status',
    'Path',
    'Message',
    'Created',
    'Start',
    'Stop'
  );

  $item = $xmlarray['result']['messages']['item'];

  if (!empty($item)) {
    foreach ($item as $k => $v) {
      if ($v['timeCreated']) {
        $timeCreated = date('Y-m-d H:i:s', $v['timeCreated']);
      }
      if ($v['timeStart']) {
        $timeStart = date('Y-m-d H:i:s', $v['timeStart']);
      }
      if ($v['messageStatus'] == 'pending') {
        $timeStop = l(t('Cancel'), "admin/settings/dotgo_api/methods/describemessages/" . $item[$k . '_attr']['message'] . "/cancel", array('query' => $destination));
      }
      elseif ($v['timeStop']) {
        $timeStop = date('Y-m-d H:i:s', $v['timeStop']);
      }
      if ($k == $k . '_attr') {
        $data[] = array(
          $item[$k . '_attr']['message'],
          $v['messageStatus'],
          $v['pathTo'],
          $v['node'],
          $timeCreated,
          $timeStart,
          $timeStop
        );
      }
    }
  }

  $output = theme('table', $header, $data);
  return $output;
}

function _dotgo_api_call_describeMessages_cancel() {

  $message_id = arg(5);

  dotgo_messages_cancel($nid = NULL, $type = NULL, $message_id);

  drupal_goto('admin/settings/dotgo_api/methods/describemessages');

}

function _dotgo_api_call_describeFollows() {

  drupal_set_title(t('Method: describeFollows'));

  $count = $_GET['count'];
  if (!$count) {
    $count = 100;
  }

  $query = array(
    'method' => 'describeFollows',
    'limit' => $count,
  );

  $xmlarray = _dotgo_api_call($query);

  $header = array('followedPath', 'followerPath');

  $item = $xmlarray['result']['follows']['item'];

  if (!empty($item)) {
    foreach ($item as $k => $v) {
      if ($k != $k . '_attr') {
        $data[] = array($v['followedPath'], $v['followerPath']);
      }
    }
  }

  $output = theme('table', $header, $data);
  return $output;
}

function _dotgo_api_call_describeRegisteredPaths() {

  drupal_set_title(t('Method: describeRegisteredPaths'));

  $query = array(
    'method' => 'describeRegisteredPaths',
    'limit' => 100,
  );

  $xmlarray = _dotgo_api_call($query);

  $header = array('registeredPath', 'registrationTime');

  $item = $xmlarray['result']['registrations']['item'];

  if (!empty($item)) {
    foreach ($item as $k => $v) {
      if ($v['registrationTime']) {
        $registrationTime = date('Y-m-d H:i:s', $v['registrationTime']);
      }
      if ($k == $k . '_attr') {
        $data[] = array(
          $item[$k . '_attr']['registeredPath'],
          $registrationTime
        );
      }
    }
  }

  $output = theme('table', $header, $data);
  return $output;
}

function _dotgo_api_call_launchApplication($options = array()) {
  $keyword = _dotgo_designator();

  drupal_set_title(t('DOTGO: Publisher'));

  $query = array(
    'method' => 'launchApplication',
    'application' => 'publisher',
    'subaccount' => $keyword,
  );

  $xmlarray = _dotgo_api_call($query);

  // Iframe specific Attributes
  //$options['name'] = ($options['name'] == NULL) ? 'dotgo_signup_widget' : $options['name'];
  $options = array(
    'width' => ($options['width'] == NULL) ? '100%' : $options['width'],
    'height' => ($options['height'] == NULL) ? '800px' : $options['height'],
    'frameborder' => ($options['frameborder'] == NULL) ? 0 : $options['frameborder'],
    'scrolling' => ($options['scrolling'] == NULL) ? 'No' : $options['scrolling'],
  );

  if ($xmlarray['result_attr']['success'] == 1) {
    $url = $xmlarray['result']['ssoURL'];
    $output = '<iframe width="' . $options['width'] . '" height="' . $options['height'] . '" frameborder="' . $options['frameborder'] . '" scrolling="' . $options['scrolling'] . '" src="' . $url . '"></iframe>';
  }

  return $output;
}

/**
 * xml2array() will convert the given XML text to an array in the XML structure.
 * Link: http://www.bin-co.com/php/scripts/xml2array/
 * Arguments : $contents - The XML text
 *                $get_attributes - 1 or 0. If this is 1 the function will get the attributes as well as the tag values - this results in a different array structure in the return value.
 *                $priority - Can be 'tag' or 'attribute'. This will change the way the resulting array sturcture. For 'tag', the tags are given more importance.
 * Return: The parsed XML in an array form. Use print_r() to see the resulting array structure.
 * Examples: $array =  xml2array(file_get_contents('feed.xml'));
 *              $array =  xml2array(file_get_contents('feed.xml', 1, 'attribute'));
 */
function _dotgo_xml2array($contents, $get_attributes = 1, $priority = 'tag') {
  if (!$contents) {
    return array();
  }

  if (!function_exists('xml_parser_create')) {
    //print "'xml_parser_create()' function not found!";
    return array();
  }

  //Get the XML parser of PHP - PHP must have this module for the parser to work
  $parser = xml_parser_create('');
  xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, "UTF-8"); # http://minutillo.com/steve/web...
  xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
  xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
  xml_parse_into_struct($parser, trim($contents), $xml_values);
  xml_parser_free($parser);

  if (!$xml_values) {
    return;
  } //Hmm...

  //Initializations
  $xml_array = array();
  $parents = array();
  $opened_tags = array();
  $arr = array();

  $current = & $xml_array; //Refference

  //Go through the tags.
  $repeated_tag_index = array(); //Multiple tags with same name will be turned into an array

  foreach ($xml_values as $data) {
    unset($attributes, $value); //Remove existing values, or there will be trouble

    //This command will extract these variables into the foreach scope
    // tag(string), type(string), level(int), attributes(array).
    extract($data); //We could use the array by itself, but this cooler.

    $result = array();
    $attributes_data = array();

    if (isset($value)) {
      if ($priority == 'tag') {
        $result = $value;
      }
      else {
        $result['value'] = $value;
      } //Put the value in a assoc array if we are in the 'Attribute' mode
    }

    //Set the attributes too.
    if (isset($attributes) and $get_attributes) {
      foreach ($attributes as $attr => $val) {
        if ($priority == 'tag') {
          $attributes_data[$attr] = $val;
        }
        else {
          $result['attr'][$attr] = $val;
        } //Set all the attributes in a array called 'attr'
      }
    }

    //See tag status and do the needed.
    if ($type == "open") { //The starting of the tag '<tag>'
      $parent[$level - 1] = & $current;
      if (!is_array($current) or (!in_array($tag, array_keys($current)))) { //Insert New tag
        $current[$tag] = $result;
        if ($attributes_data) {
          $current[$tag . '_attr'] = $attributes_data;
        }
        $repeated_tag_index[$tag . '_' . $level] = 1;

        $current = & $current[$tag];
        //dsm($result);
      }
      else { //There was another element with the same tag name
        if (isset($current[$tag][0])) { //If there is a 0th element it is already an array
          $current[$tag][$repeated_tag_index[$tag . '_' . $level]] = $result;

          if ($attributes_data) {
            $current[$tag][$repeated_tag_index[$tag . '_' . $level] . '_attr'] = $attributes_data;
          }

          $repeated_tag_index[$tag . '_' . $level]++;

        }
        else { //This section will make the value an array if multiple tags with the same name appear together
          $current[$tag] = array(
            $current[$tag],
            $result
          ); //This will combine the existing item and the new item together to make an array
          $repeated_tag_index[$tag . '_' . $level] = 2;

          if (isset($current[$tag . '_attr'])) { //The attribute of the last(0th) tag must be moved as well
            $current[$tag]['0_attr'] = $current[$tag . '_attr'];
            unset($current[$tag . '_attr']);
          }
          if ($attributes_data) {
            $current[$tag]['1_attr'] = $attributes_data;
          }
        }
        $last_item_index = $repeated_tag_index[$tag . '_' . $level] - 1;
        $current = & $current[$tag][$last_item_index];
      }
    }
    elseif ($type == "complete") { //Tags that ends in 1 line '<tag>'
      //See if the key is already taken.
      if (!isset($current[$tag])) { //New Key
        $current[$tag] = $result;
        $repeated_tag_index[$tag . '_' . $level] = 1;
        if ($priority == 'tag' and $attributes_data) {
          $current[$tag . '_attr'] = $attributes_data;
        }

      }
      else { //If taken, put all things inside a list(array)
        if (isset($current[$tag][0]) and is_array($current[$tag])) { //If it is already an array...
          // ...push the new element into that array.
          $current[$tag][$repeated_tag_index[$tag . '_' . $level]] = $result;

          if ($priority == 'tag' and $get_attributes and $attributes_data) {
            $current[$tag][$repeated_tag_index[$tag . '_' . $level] . '_attr'] = $attributes_data;
          }
          $repeated_tag_index[$tag . '_' . $level]++;

        }
        else { //If it is not an array...
          $current[$tag] = array(
            $current[$tag],
            $result
          ); //...Make it an array using using the existing value and the new value

          $repeated_tag_index[$tag . '_' . $level] = 1;
          if ($priority == 'tag' and $get_attributes) {
            if (isset($current[$tag . '_attr'])) { //The attribute of the last(0th) tag must be moved as well
              $current[$tag]['0_attr'] = $current[$tag . '_attr'];
              unset($current[$tag . '_attr']);
            }

            if ($attributes_data) {
              $current[$tag][$repeated_tag_index[$tag . '_' . $level] . '_attr'] = $attributes_data;
            }
          }
          $repeated_tag_index[$tag . '_' . $level]++; //0 and 1 index is already taken
        }
      }

    }
    elseif ($type == 'close') { //End of tag '</tag>'
      $current = & $parent[$level - 1];
    }
  }
  return ($xml_array);
}  