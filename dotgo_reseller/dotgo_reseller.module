<?php

/**
 * Implementation of hook_menu
 */
function dotgo_reseller_menu() {
  $items = array();

  $items['admin/settings/dotgo_api/reseller'] = array(
    'title' => 'DOTGO Reseller Settings',
    'description' => "Manage Dotgo Reseller Settings",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dotgo_reseller_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dotgo_reseller.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/settings/dotgo_api/publisher'] = array(
    'title' => 'Launch DOTGO Publisher',
    'description' => "Manage Dotgo Reseller Settings",
    'page callback' => '_dotgo_api_call_launchApplication',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/settings/dotgo_api/methods'] = array(
    'title' => 'DOTGO Methods',
    'description' => "describeMessages",
    'page callback' => '_dotgo_api_call_describeMessages',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'weight' => 3,
  );
  $items['admin/settings/dotgo_api/methods/describemessages'] = array(
    'title' => 'describeMessages',
    'description' => "describeMessages",
    'page callback' => '_dotgo_api_call_describeMessages',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/dotgo_api/methods/describemessages/%/cancel'] = array(
    'title' => 'describeMessages Cancel',
    'page callback' => '_dotgo_api_call_describeMessages_cancel',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/dotgo_api/methods/describefollows'] = array(
    'title' => 'describeFollows',
    'description' => "describeFollows",
    'page callback' => '_dotgo_api_call_describeFollows',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/settings/dotgo_api/methods/describeregisteredpaths'] = array(
    'title' => 'describeRegisteredPaths',
    'description' => "describeRegisteredPaths",
    'page callback' => '_dotgo_api_call_describeRegisteredPaths',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  );

  return $items;

}


//////////////////////////////////////////////////
//////////////////// API CALLS ///////////////////
//////////////////////////////////////////////////
// Send an API Request to DOTGO
// Returns API Results from DOTGO
// *** MUST HAVE RESELLER KEY ***
// $query = array of parameters for the passed Method. Exluding: api_key, api_password, url, urls, format
function _dotgo_api_call($query = array()) {

  //Standard $query parameters
  $keyword = _dotgo_designator();
  $api_key = variable_get('dotgo_api_key', t(''));
  $api_password = variable_get('dotgo_api_password', t(''));
  $url = 'http://' . $_SERVER['HTTP_HOST'] . '/index.cmrl';

  $query[] = array(
    'api_key' => $api_key,
    'api_password' => $api_password,
    'url' => $url,
    'urls' => $url,
    'format' => 'xml',
  );

  $url = url('https://dotgo.com/api/1.0/', array(
    'query' => $query,
    'external' => TRUE,
  ));

  //Send a http request with drupal to the dotgo api
  $http_reply = drupal_http_request($url);

  if ($http_reply == "") {
    return "EMPTY";
  }

  //API returns results of API call with XML so we convert that to an array
  $xmlarray = _dotgo_xml2array($http_reply->data);

  if ($query['method']) {
    if ($xmlarray['result_attr']['success'] == 0) {
      drupal_set_message($xmlarray['result']['error']['code'] . ': ' . $xmlarray['result']['error']['description'], $type = 'error', $repeat = TRUE);
    }
    if (module_exists('watchdog')) {
      $message = print_r($xmlarray, TRUE);
      watchdog($query['method'], $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
    }
  }
  else {

    if (module_exists('watchdog')) {
      watchdog('DOTGO API', 'No Method Provided', $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
    }

  }

  return $xmlarray;

}

function _dotgo_api_call_describeMessages() {

  drupal_set_title(t('Method: describeMessages'));

  $query = array(
    'method' => 'describeMessages',
    'limit' => 100,
  );

  $xmlarray = _dotgo_api_call($query);

  $header = array(
    'Message ID',
    'Status',
    'Path',
    'Message',
    'Created',
    'Start',
    'Stop'
  );

  $item = $xmlarray['result']['messages']['item'];

  if (!empty($item)) {
    foreach ($item as $k => $v) {
      if ($v['timeCreated']) {
        $timeCreated = date('Y-m-d H:i:s', $v['timeCreated']);
      }
      if ($v['timeStart']) {
        $timeStart = date('Y-m-d H:i:s', $v['timeStart']);
      }
      if ($v['messageStatus'] == 'pending') {
        $timeStop = l(t('Cancel'), "admin/settings/dotgo_api/methods/describemessages/" . $item[$k . '_attr']['message'] . "/cancel", array('query' => $destination));
      }
      elseif ($v['timeStop']) {
        $timeStop = date('Y-m-d H:i:s', $v['timeStop']);
      }
      if ($k == $k . '_attr') {
        $data[] = array(
          $item[$k . '_attr']['message'],
          $v['messageStatus'],
          $v['pathTo'],
          $v['node'],
          $timeCreated,
          $timeStart,
          $timeStop
        );
      }
    }
  }

  $output = theme('table', $header, $data);
  return $output;
}

function _dotgo_api_call_describeMessages_cancel() {

  $message_id = arg(5);

  dotgo_messages_cancel($nid = NULL, $type = NULL, $message_id);

  drupal_goto('admin/settings/dotgo_api/methods/describemessages');

}

function _dotgo_api_call_describeFollows() {

  drupal_set_title(t('Method: describeFollows'));

  $count = $_GET['count'];
  if (!$count) {
    $count = 100;
  }

  $query = array(
    'method' => 'describeFollows',
    'limit' => $count,
  );

  $xmlarray = _dotgo_api_call($query);

  $header = array('followedPath', 'followerPath');

  $item = $xmlarray['result']['follows']['item'];

  if (!empty($item)) {
    foreach ($item as $k => $v) {
      if ($k != $k . '_attr') {
        $data[] = array($v['followedPath'], $v['followerPath']);
      }
    }
  }

  $output = theme('table', $header, $data);
  return $output;
}

function _dotgo_api_call_describeRegisteredPaths() {

  drupal_set_title(t('Method: describeRegisteredPaths'));

  $query = array(
    'method' => 'describeRegisteredPaths',
    'limit' => 100,
  );

  $xmlarray = _dotgo_api_call($query);

  $header = array('registeredPath', 'registrationTime');

  $item = $xmlarray['result']['registrations']['item'];

  if (!empty($item)) {
    foreach ($item as $k => $v) {
      if ($v['registrationTime']) {
        $registrationTime = date('Y-m-d H:i:s', $v['registrationTime']);
      }
      if ($k == $k . '_attr') {
        $data[] = array(
          $item[$k . '_attr']['registeredPath'],
          $registrationTime
        );
      }
    }
  }

  $output = theme('table', $header, $data);
  return $output;
}

function _dotgo_api_call_launchApplication($options = array()) {
  $keyword = _dotgo_designator();

  drupal_set_title(t('DOTGO: Publisher'));

  $query = array(
    'method' => 'launchApplication',
    'application' => 'publisher',
    'subaccount' => $keyword,
  );

  $xmlarray = _dotgo_api_call($query);

  // Iframe specific Attributes
  //$options['name'] = ($options['name'] == NULL) ? 'dotgo_signup_widget' : $options['name'];
  $options = array(
    'width' => ($options['width'] == NULL) ? '100%' : $options['width'],
    'height' => ($options['height'] == NULL) ? '800px' : $options['height'],
    'frameborder' => ($options['frameborder'] == NULL) ? 0 : $options['frameborder'],
    'scrolling' => ($options['scrolling'] == NULL) ? 'No' : $options['scrolling'],
  );

  if ($xmlarray['result_attr']['success'] == 1) {
    $url = $xmlarray['result']['ssoURL'];
    $output = '<iframe width="' . $options['width'] . '" height="' . $options['height'] . '" frameborder="' . $options['frameborder'] . '" scrolling="' . $options['scrolling'] . '" src="' . $url . '"></iframe>';
  }

  return $output;
}